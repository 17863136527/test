{"version":3,"sources":["img1.jpg","logo.svg","myjs.js","webpack:///./src/myless.less?b7e7","myless.less","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","str","window","document","body","onload","container","getElementById","showdiv","_i","_str","length","i","oldhtml","innerHTML","newhtml","concat","addEventListener","console","log","map","a","content","options","hmr","transform","insertInto","undefined","locals","push","App","react_default","createElement","className","id","src","image","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0GCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxC,IAAIC,EAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BC,OAAOC,SAASC,KAAKC,OAAS,WAC1B,IAAMC,EAAYH,SAASI,eAAe,aAI1C,SAASC,IACL,QAAAC,EAAA,EAAAC,EAAcT,EAAdQ,EAAAC,EAAAC,OAAAF,IAAmB,CAAd,IAAIG,EAACF,EAAAD,GACFI,EAAUP,EAAUQ,UACpBC,EAAO,iBAAAC,OACTH,EADS,8BAAAG,OAEGJ,EAFH,kCAAAI,OAE2BJ,EAF3B,wBAIXN,EAAUQ,UAAYC,GAVjBZ,SAASI,eAAe,OAC9BU,iBAAiB,QAYxB,WACIC,QAAQC,IAAI,GACZlB,EAAMA,EAAImB,IAAI,SAAAC,GAAC,OAAIA,EAAI,IACvBf,EAAUQ,UAAY,GACtBN,IACAU,QAAQC,IAAI,KAhBhBX,0DCJJ,IAAAc,EAAcvB,EAAQ,IAEtB,kBAAAuB,MAAA,EAA4CzB,EAAAe,EAASU,EAAA,MAOrD,IAAAC,EAAA,CAAeC,KAAA,EAEfC,eAPAA,EAQAC,gBAAAC,GAEa5B,EAAQ,GAARA,CAAwDuB,EAAAC,GAErED,EAAAM,SAAA/B,EAAAC,QAAAwB,EAAAM,0BCjBA/B,EAAAC,QAA2BC,EAAQ,GAARA,EAAwD,IAEnF8B,KAAA,CAAchC,EAAAe,EAAS,2MAAyM,uICsCjNkB,MAhCf,WACE,OACEC,EAAAV,EAAAW,cAAA,OAAKC,UAAU,OACbF,EAAAV,EAAAW,cAAA,UAAQC,UAAU,cAGhBF,EAAAV,EAAAW,cAAA,OAAKC,UAAU,QACfF,EAAAV,EAAAW,cAAA,OAAKC,UAAU,cACXF,EAAAV,EAAAW,cAAA,UAAQE,GAAG,MAAMD,UAAU,UAA3B,4BACAF,EAAAV,EAAAW,cAAA,OAAKE,GAAG,YAAYD,UAAU,SAE9BF,EAAAV,EAAAW,cAAA,OAAKG,IAAKC,IAAOH,UAAU,QAC3BF,EAAAV,EAAAW,cAAA,OAAKC,UAAU,OAAf,yBCRQI,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAV,EAAAW,cAACW,EAAD,MAASxC,SAASI,eAAe,SD2H3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00a4eeb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img1.1417afd7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","let str = [1, 2, 3, 4, 5, 6]\r\nwindow.document.body.onload = function(){\r\n    const container = document.getElementById('container')\r\n    const button=document.getElementById('add')\r\n    button.addEventListener('click',clickbtn)\r\n    showdiv()\r\n    function showdiv() {\r\n        for (let i of str) {\r\n            let oldhtml = container.innerHTML\r\n            let newhtml = `\r\n            ${oldhtml}\r\n            <div id=\"div${i}\" class=\"minidiv\">我是${i}</div>\r\n            `\r\n            container.innerHTML = newhtml\r\n        }\r\n    }\r\n    function clickbtn() {\r\n        console.log(1)\r\n        str = str.map(a => a + 1)\r\n        container.innerHTML = ''\r\n        showdiv()\r\n        console.log(1)\r\n    }\r\n}\r\n\r\n","\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./myless.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./myless.less\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./myless.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".box {\\n  color: #fe33ac;\\n  border-color: #fdcdea;\\n  width: 900px;\\n  height: 100px;\\n}\\n.box div {\\n  -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\\n}\\n\", \"\"]);\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './myjs.js';\nimport './mycss.css';\nimport './App.css';\nimport './myless.less';\nimport image from './img1.jpg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n        <div className=\"flex\">\n        <div className=\"flex outer\">\n            <button id=\"add\" className=\"button\">点我试试</button>\n            <div id=\"container\" className=\"flex\">\n            </div>\n            <img src={image} className=\"img\"/>\n            <div className=\"box\">我是less</div>\n        </div>\n    </div>\n\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}